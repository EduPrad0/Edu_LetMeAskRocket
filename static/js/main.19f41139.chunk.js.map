{"version":3,"sources":["services/firebase.ts","assets/images/illustration.svg","assets/images/logo.svg","assets/images/google-icon.svg","components/Button.tsx","contexts/AuthContext.tsx","hooks.ts/useAuth.ts","pages/Home.tsx","pages/NewRoom.tsx","assets/images/copy.svg","components/RoomCode.tsx","pages/Room.tsx","App.tsx","index.tsx"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","database","Button","props","className","AuthContext","createContext","AuthContextProvider","useState","user","setUser","a","provider","GoogleAuthProvider","signInWithPopup","result","displayName","photoURL","uid","Error","id","nome","avatar","useEffect","unsubscribe","onAuthStateChanged","Provider","value","signInWithGoogle","children","useAuth","useContext","Home","history","useHistory","roomCode","setRoomCode","push","event","preventDefault","trim","ref","get","exists","alert","src","illustrationImg","alt","logoImg","onClick","googleIcon","onSubmit","type","placeholder","onChange","target","NewRoom","newRoom","setNewRoom","roomRef","title","authorId","firebaseRoom","key","to","RoomCode","navigator","clipboard","writeText","code","copyImg","Room","params","useParams","newQuestion","setNewQuestion","roomId","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19f41139.chunk.js","sourcesContent":["import firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/database';\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID\n  };\n\n\n  firebase.initializeApp(firebaseConfig);\n\nconst auth = firebase.auth();\nconst database = firebase.database();\n\n\nexport { firebase, auth, database };","export default __webpack_public_path__ + \"static/media/illustration.ae7276f0.svg\";","export default __webpack_public_path__ + \"static/media/logo.a88331cb.svg\";","export default __webpack_public_path__ + \"static/media/google-icon.df15d8e5.svg\";","import { ButtonHTMLAttributes } from 'react';\n\nimport '../styles/button.scss'\n\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement>;\n\n\nexport function Button (props: ButtonProps){\n    return(\n        <button className=\"button\"{...props}/>    \n    )\n}","import { createContext, ReactNode, useEffect, useState } from \"react\";\nimport { auth, firebase } from \"../services/firebase\";\n\n\ntype User = {\n    id: string;\n    nome: string;\n    avatar: string;\n  }\n  \n  \n  type AuthContextType = {\n    user: User | undefined;\n    signInWithGoogle: () => Promise<void>;\n  }\n  \n  type AuthContextProviderProps = {\n      children: ReactNode;\n  }\n  \n\n\nexport const AuthContext = createContext({} as AuthContextType);\n\n\nexport function AuthContextProvider (props: AuthContextProviderProps) {\n    const [ user, setUser ] = useState<User>()\n\n    useEffect(() => {\n      const unsubscribe =  auth.onAuthStateChanged(user =>{\n        if(user){\n          const { displayName, photoURL, uid } = user;\n  \n          if( !displayName || !photoURL){\n            throw new Error ('Missing information from Google Account')\n          }\n          \n          setUser({\n            id : uid,\n            nome : displayName,\n            avatar : photoURL\n          })\n        \n        }\n      })\n  \n      return () => {\n        unsubscribe();\n      }\n    }, [])\n  \n  \n    async function signInWithGoogle(){\n      const provider = new firebase.auth.GoogleAuthProvider();\n      const result = await auth.signInWithPopup(provider);\n        \n      if(result.user){\n        const { displayName, photoURL, uid } = result.user;\n  \n          if( !displayName || !photoURL){\n            throw new Error ('Missing information from Google Account')\n          }\n          \n          setUser({\n            id : uid,\n            nome : displayName,\n            avatar : photoURL\n          });\n        \n      }\n  \n    }\n  \n    return(\n        <AuthContext.Provider value={{ user, signInWithGoogle }} >\n            {props.children}\n        </AuthContext.Provider>\n    )\n}","import { useContext } from \"react\";\nimport { AuthContext } from '../contexts/AuthContext'\n\nexport function useAuth(){\n    const value = useContext(AuthContext);\n\n    return value;\n}","import { FormEvent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { database } from '../services/firebase'\n\nimport illustrationImg from '../assets/images/illustration.svg';\nimport logoImg from '../assets/images/logo.svg';\nimport googleIcon from '../assets/images/google-icon.svg';\n\nimport { Button } from '../components/Button';\n\nimport '../styles/auth.scss'\nimport { useAuth } from '../hooks.ts/useAuth';\n\n\nexport function Home(){\n    const history = useHistory(); \n    const { user, signInWithGoogle } = useAuth();\n    const [roomCode, setRoomCode] = useState('');\n\n\n    async function handleCreateRoom(){\n        if(!user){\n            await signInWithGoogle();\n        }\n\n\n        history.push('/rooms/new')\n    }\n\n    async function handleJoinRoom(event: FormEvent){\n        event.preventDefault();\n\n        if(roomCode.trim() === '' ){\n            return;\n        }\n\n        const roomRef = await database.ref(`rooms/${roomCode}`).get();\n\n        if(!roomRef.exists()) {\n            alert('Room does not exist.')\n            return;\n        }\n\n        history.push(`/rooms/${roomCode}`)\n    }\n\n    return(\n        <div id=\"page-auth\">\n            <aside>\n                <img src={illustrationImg} alt=\"Ilustração simbolizando perguntas e respostas\" />\n                <strong>Crie salas de Q&amp;A ao vivo</strong>\n                <p>Tire as dúvidas da sua audiência em tempo-real</p>\n            </aside>\n            <main>\n               <div className=\"main-content\">\n               <img src={logoImg} alt=\"LetMeAsk\" />\n                <button onClick={handleCreateRoom} className=\"create-room\">\n                    <img src={googleIcon} alt=\"google-icon\" />\n                    Crie sua sala com o Google\n                </button>\n                <div className=\"separator\">ou entre em uma sala</div>\n                <form onSubmit={handleJoinRoom}>\n                    <input type=\"text\"\n                        placeholder=\"Digite o código da sala\"\n                        onChange={event => setRoomCode(event.target.value)}\n                        value={roomCode}\n                    />\n                    <Button type=\"submit\">\n                        Entrar na sala\n                    </Button>\n                </form>\n               </div>\n            \n            </main>\n        </div>\n    )\n}","import { FormEvent, useState } from 'react'\nimport { Link, useHistory } from 'react-router-dom';\nimport illustrationImg from '../assets/images/illustration.svg';\nimport logoImg from '../assets/images/logo.svg';\n// import googleIcon from '../assets/images/google-icon.svg';\nimport '../styles/auth.scss'\nimport { Button } from '../components/Button';\n// import { useContext } from 'react';\nimport { database } from '../services/firebase';\nimport { useAuth } from '../hooks.ts/useAuth';\n\nexport function NewRoom(){\n    const { user } = useAuth();   \n    const history = useHistory();\n    const [newRoom, setNewRoom] = useState('');\n\n    async function handleCreateRoom(event: FormEvent){\n     event.preventDefault();   \n\n     if(newRoom.trim() === ''){\n         return;\n     }\n\n\n     const roomRef = database.ref('rooms');\n     const firebaseRoom = await roomRef.push({\n         title: newRoom,\n         authorId: user?.id\n     })\n\n     history.push(`/rooms/${firebaseRoom.key}`)\n    }\n\n    return(\n        <div id=\"page-auth\">\n            <aside>\n                <img src={illustrationImg} alt=\"Ilustração simbolizando perguntas e respostas\" />\n                <strong>Crie salas de Q&amp;A ao vivo</strong>\n                <p>Tire as dúvidas da sua audiência em tempo-real</p>\n            </aside>\n\n            <main>\n               <div className=\"main-content\">\n               <img src={logoImg} alt=\"LetMeAsk\" />\n               <h2>Criar uma Nova sala</h2>\n                <form onSubmit={handleCreateRoom}>\n                    <input \n                        type=\"text\"\n                        placeholder=\"Nome da sala\"\n                        onChange={event => setNewRoom(event.target.value)}\n                        value={newRoom}\n                    \n                    />\n                    <Button type=\"submit\">\n                        Criar sala\n                    </Button>\n                </form>\n                <p>\n                    Quer entrar em uma sala existente? <Link to=\"/\">Clique aqui</Link>\n                </p>\n               </div>\n            \n            </main>\n        </div>\n    )\n}","export default __webpack_public_path__ + \"static/media/copy.f622509a.svg\";","\n\nimport copyImg from '../assets/images/copy.svg';\n\nimport '../styles/roomcode.scss';\n\ntype RoomCodeProps = {\n    code: string;\n}\n\nexport function RoomCode (props: RoomCodeProps ) {\n   function copyRoomCodeToClipboard() {\n       navigator.clipboard.writeText(props.code)\n   }\n   \n       \n    return(\n        <button className=\"room-code\" onClick={copyRoomCodeToClipboard}>\n            <div>\n                <img src={copyImg} alt=\"Copiar cod sala\" />\n            </div>    \n            <span>Sala #${props.code}</span>\n         </button>\n    );\n}","import { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport logoImg from '../assets/images/logo.svg';\nimport { Button } from '../components/Button';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from '../hooks.ts/useAuth';\nimport '../styles/room.scss'\n\ntype RoomParams = {\n    id: string;\n}\n\nexport function Room () {\n    const { user } = useAuth();\n    const params = useParams<RoomParams>();\n    const [newQuestion, setNewQuestion] = useState('');\n  \n  \n    const roomId = params.id;\n\n    async function handleSendQuestion(){\n        if(newQuestion.trim() == ''){\n            return;\n        }\n\n        if(!user){\n            throw new Error('You must be logged in')\n        }\n\n        const question = {\n            content: newQuestion,\n            author: {\n                nome : user.nome, \n                avatar: user.avatar,\n            },\n            isHighlighted: false,\n            isAnswered: false\n        }\n\n\n\n    }\n\n    return (\n        <div id=\"page-room\">\n            <header>   \n                <div className=\"content\">\n               <img src={logoImg} alt=\"LetMeAsk\" />\n                <RoomCode code={roomId}/>\n                </div>\n\n            </header>\n\n            <main>\n                <div className=\"room-title\">\n                    <h1>Sala React</h1>\n                    <span>4 perguntas</span>\n\n                </div>\n                <form>\n                    <textarea \n                    placeholder=\"O que você quer perguntar\"\n                    onChange={event => setNewQuestion(event.target.value)}\n                    value ={newQuestion}\n                    />\n                \n                <div className=\"form-footer\"> \n                <span>Para enviar uma pergunta, <button>faça seu login</button>.</span>\n                <Button type=\"submit\"> Enviar pergunta </Button>\n                </div>\n                </form>\n            </main>\n        </div>\n    );\n}","// import { createContext, useState, useEffect } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Home } from './pages/Home';\nimport { NewRoom } from \"./pages/NewRoom\";\nimport { Room } from './pages/Room';\n// import { auth, firebase } from './services/firebase';\n\nimport { AuthContextProvider } from './contexts/AuthContext'\n\n\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n    <AuthContextProvider>\n      <Switch>\n          <Route path=\"/\" exact component={Home}/>\n          <Route path=\"/rooms/new\" component={NewRoom}/>\n          <Route path=\"/rooms/:id\" component={Room}/>\n      </Switch>\n    </AuthContextProvider>\n   </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/global.scss';\n\nimport './services/firebase'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}